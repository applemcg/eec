
> Copyright (C) 2014, JYATL, Just Yet Another Testing Lab

> Author: Marty McGowan, mcgowan@alum.mit.edu

## cummings

Cummings is as  syntax-free a language as one can  make it.  This 0.07
version parses  cummings input into its four  syntactic components and
handles a single escape mechanism, the backslash. The syntax items:

        TOKEN
        OPEN
        SEPARATOR
        CLOSE

In cummings, it is only possible to escape the syntactic elements:

        space        -- see following note
        comma        -- the separator
        left paren   -- the OPEN 
        right paren  -- the CLOSE
        backslash    -- the backslash character itself

The escape  character may  be used to  capture other characters  in a
literal definition.  (see below)

A major feature of the language permits blank space in a token.

## tokens

A  token is  the longest  sequence of  (possibly  escaped) characters,
trimmed of its leading and  trailing space, otherwise delimited by the
non-space syntactic elements.  Tab  character and newlines are treated
as space.  so, for example, two definitions of the tab character:

        define ( TAB , \{literal tab} )       define( ascii tab, TAB)

where `{literal tab}` is a single tab character.

## syntax

The language syntax looks quite a bit like lisp or scheme, in that the
function  or  operator  appears  first, followed  by  it's  arguments.
Arguments  may   be  familiar  single-word  tokens   or  the  cummings
innovation of  the multi-word token.  this example  shows a multi-word
function name.

        any named function ( arg, two-word arg, ... )

## philosophy

The  language is  built on  the idea  that all  language  features are
invoked not by  syntax, but by meaningful semantics.   I'm troubled by
the modern  profusion of what  I call syntactic noise.   e.g. python's
substring   operations  `string[x:y]`  or   the  object   notation  of
`object.method( arg, ...)`.  The former is better represented:

         substring( string,  x, y)     comment  ( and the  latter)
         method(    object, arg, ...)

Today's smart editors reduce the  need for noisy syntax, when the same
helper could supply a simple  mnemonic.  

The user will quickly realize  the need for quotation marks is greatly
reduced:
    
         define( message,    this message is available for timely display. )

Leading  and trailing  spaces  are trimmed  unless escaped.   Rigorous
application of simple rules leaves little room for syntactic mistakes.

## cummings pseudo code

For each token in the input stream:

* if the token is a syntax element "(,)", then perform the expected behavior:

      * '(' open a new frame,
      * ',' anticipate the next argument
      * ')' execute the command in the current frame,
            leaving the result in the parent's arg slot

* else if the token is currently undefined:

      * if the state does NOT expect a new token, then raise a parser error, UNDEFINED token
      * else ( it was undefined and for example appears as teh 1st argument to defining functions) so,
            save the token a new definition , e.g.

                set ( variable, value )

* else ( the token was defined, so):

      * save use the current frame's argument slot, 
      * stack a new frame, saving the parent's arg slot as (parent, slot#)

## wildest dreams

That **cummings**  becomes the introductory programming language of choice.

