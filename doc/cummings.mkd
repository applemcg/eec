

  (C) 2014, JYATL 
  Author: Marty McGowan, mcgowan@alum.mit.edu

This is the python-based cummings language parser.

## cummings


The language is as syntax-free as one can make it.
This 0.5 version parses cummings input into its
four syntactic components:

    TOKEN
    OPEN
    SEPARATOR
    CLOSE

as well as recognizing it's single escape mechanism,
the backslash.   In the language, it is only possible
to escape the syntactic elements:

    space        -- see following note
    comma        -- the separator
    left paren   -- the OPEN 
    right paren  -- the CLOSE

the escape character may be used to capture other characters int a
literal definition.  (see below)

a major feature of the language permits spaces in a token.

## tokens

A Token is the longest sequence of (possibly escaped) characters,
trimmed of its leading and trailing spaces, otherwise delimited by the
non-space syntactic elements.  For parsing purposes a tab character is
treated as a space.  so, for example,

    define ( TAB , \{literal tab} )   
    define( ascii tab, TAB)

taken together, where "{literal tab}" is the single tab character, are
two definitions of the tab character

## syntax


The language syntax will look quite a bit like lisp or scheme, in that
the function or operator appears first, followed by it's arguments:

    function ( arg, two-word arg, ... )

where arguments may be familiar single-word tokens or tne cummings
innovation of the multi-word token.   Similarly function names may be
multi-word.  

## philosophy


the language design builds the idea that all language features are 
invoked, not by syntax, but by a word of meaningful sematics.
i'm troubled by the modern profusion of what i'm calling syntactic
noise.   e.g. python's substring operations  string[x:y] or 
the object notation of object.method( arg, ...).  The former is
better represented:

     substring( string, x, x)    comment ( and the latter)
     method( object, arg, ...)

there's little excuse with today's smart editors to require noisy
syntax, when the same helper could supply a simple mnemonic.
the user will quickly realize the need for quotation marks is greatly
reduced:

     define( message, this message is available for timely display. )

escaping leading or trailing spaces will retain them.

## cummings (in python) pseudo code

for each token in the input stream:

* if the token is a syntax element "(,)"

       * perform the expected behavior:
            * '(' open a new frame,
            * ',' expect the next argument
            * ')' execute the command in the current frame,
                  leaving the result in the parent's arg slot


* else if the token is currently undefined:


      * if the state does NOT expects a new token

            raise a parser error, UNDEFINED token

      * else ( it was so,)
            
            save the token a new definition 
                 list( variable, constant, function, ...)

* else ( the token was defined, so):

      * save use the current frame's argument slot, 

      * stack a new frame, saving the parent's arg slot as (parent, slot#)

       
