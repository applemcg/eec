
## A language research project

I'm looking for Computer Science  researchers to contribute to or lead
development of  a new computer  language, which i call  _cummings_ for
its spare syntax.  I've been developing  it since 2006.  In 2012 i had
a cycling copy in Tcl, and am re-crafting it in Python.  My experience
is detailed below,  other than to say i'm a  software professional for
30+ years and recently retired.

I  call this  language _cummings_  in behalf  of the  poet eecummings,
whose spare style motivates the language ideas.  By inviting others to
contribute, i realize i give up  "control", so at the outset, here are
the "invariants":

* spare syntax:  Only parenthesis, comma, and the escaping back-slash.
* tokens (names) may include spaces.
* operations are preferably names, though symbols are permitted.
* functional notation (not to exclude object orientation).
* the language name: _cummings_, and the suffix of a cummings source
  code:  _eec_.

All  else is  open  for  inclusion. For  example,  i  imagine all  the
reserved keywords would have representations in any readily translated
language,  and once  we have  a credible  english representation,  the
extension  to other  roman-alphabet languages  is merely  an exercise.
For example, a cummings comment is:
  
        comment ( ... )

and in spanish:

        commentario ( ... )

and _en englese_ this would be built:

        function ( commentario, args( *), comment ( args))
        comment( --                                 finnish	--)
        function ( kommentti, args( *), comment ( args)) 

so, with this feature, a spanish version of cummings would be:

        $ es_cummings () { cummings espanol.eec $*; }

My view of the language, at the moment is _typeless_, not unlike `awk`
where "everything is a string", unless you treat it like a number, and
it behaves as expected.   More cummings descriptions are  found in the
references.

Not being a great student of object languages, i appreciate the use of
class definitions and useful data  structures.  I expect this is where
the facilities of a research department could most contribute.

### Where is it useful

I hope we could build  libraries to gather common facilities available
in scripting  languages.  Being  familiar with Python  and Tcl,  i see
every  reason  to  include  the  `os`,  `sys`,  `file`  and  `string`,
... interfaces in a consistent fashion.

cummings does  not challenge today's  system languages (i.e.   C, C++,
C#, Java, ...)  but fits squarely into the "scripting" space.  Because
of cummings' simple, straight-forward appearance, i can see its use as
a training language.   As a trainer, cummings offers  a "no apologies"
syntax.  As  a shell practitioner, i  wrestle with the need  to bridge
the scripting-programming gap. Maybe cummings can help.

### My credentials

I'm a former  Member of Technical Staff from AT&T  Bell Labs, followed
by  two years  at Nokia,  broadband, then  teaching Math  (algebra and
geometry) at  Benedictine Academy,  Elizabeth, NJ, retiring  after six
years of  technical training on Wall  St.  I was employed  by Fidessa,
who  supplies trading  platforms, market  data, and  a global  trading
network to 2000 banks and financial services firms.

In that position  i trained company consultants  and service personnel
in our Introduction to Tcl,  the Infrastructure Services (in Tcl), and
the  Java API  to our  algorithmic services.   At Bell  Labs, i  was a
voting member  of the  IEEE P1003.[123] committees,  standardizing the
Operating  System Interface,  the Command  Interface, and  a committee
member of .3, the Test Methods Standard.

With others  at Bell Labs, i  hold two US Patents,  the more prominent
being  US#  5,559,520  _Wireless   Information  System  for  Acquiring
Location Related Information_. (Sept 24, 1996)

### Formal education

* Bachelor of Science: MIT, Mechanical Engineering
* Master of Engineering: Catholic Univ of America

### Publications

* Github:  http://github.com/applemcg/eec  -- current source archive

* Cummings Design Guide: http://mcgowans.org/eec/cummings.html

* Shell Functions: http://leanpub.com/shellfunctions -- an introductory
  book on the practice of shell functions.

* GPS Patent: http://www.google.com/patents/US5559520 -- with ~ 300 citations

* Software Assembly Line. IEEE Tools Fair '83: http://arxiv.org/abs/1006.2155

* MS Paper: CUA '70: Lunar Gravitational Assist for Interplanetary Missions



